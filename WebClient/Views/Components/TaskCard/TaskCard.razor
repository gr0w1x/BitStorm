@using WebClient.Services
@using WebClient.Models
@using WebClient.Constants
@using WebClient.Views.Components.Rank
@using WebClient.Extensions

@inject Navigation Navigation

<div class="task-card">
    <h3 class="title">
        <span class="caption">
            <Rank Value="@Model.Task.Level" />
        </span>
        @if (HasLink) {
            <a @onclick="@(() => Navigation.NavigateTo(Routes.TaskPage(@Model.Task.Id)))">
                @Model.Task.Title
            </a>
        } else {
            @Model.Task.Title
        }
    </h3>
    <div class="labels">
        <span class="label">
            <i class="fa-regular fa-star" />
            @Model.Task.Likes
        </span>
        <span class="label">
            <i class="fa-solid fa-user"></i>
            By
            @if(_loaded)
            {
                @if (Model.Author == null)
                {
                    <span>???</span>
                }
                else
                {
                    <a @onclick="@(() => Navigation.NavigateTo(Routes.UserPage(Model.Author.Id)))">
                        @Model.Author.Username
                    </a>
                }
            }
        </span>
        @if (@Model.Task.Beta)
        {
            <span class="label">
                <i class="fa-solid fa-flask" />
                Beta
            </span>
        }
        <span class="label">
            <i class="fa-regular fa-calendar"></i>
            Created: @Model.Task.CreatedAt.DefaultFormat()
        </span>
        @if (@Model.Task.UpdatedAt != null)
        {
            <span class="label">
                <i class="fa-regular fa-calendar"></i>
                Updated: @Model.Task.UpdatedAt.Value.DefaultFormat()
            </span>
        }
    </div>
    @if (Model.Task.Tags.Any())
    {
        <div class="tags caption">
            <i class="fa-solid fa-tag"></i>
            @foreach (var tag in Model.Task.Tags)
            {
                <span class="tag">@tag.Id</span>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public TaskCardModel Model { get; set; }

    [Parameter]
    public bool HasLink { get; set; } = false;

    [Inject]
    public UsersService UsersService { get; set; }

    protected bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAuthor();
    }

    protected async Task LoadAuthor()
    {
        try
        {
            Model.Author = await UsersService.Get(Model.Task.AuthorId);
            StateHasChanged();
        }
        catch { }
        finally
        {
            _loaded = true;
        }
    }
}
