@page "/sign-up"
@layout Layouts.SignLayout.SignLayout
@using Types.Dtos
@using WebClient.Store.Pages.SignUpPage
@using WebClient.Views.Components
@using WebClient.Views.Components.OneLineInput
@using WebClient.Views.Components.InputWrapper
@using WebClient.Views.Components.Button
@using WebClient.Views.Components.CircleSpinner
@using WebClient.Views.Components.ResultStatus
@using WebClient.Views.Pages.SignTemplate
@inherits SignTemplateBase<SignUpPageState, SignUpDto>

@code {
    private void NavigateToSignIn()
    {
        Navigation.NavigateTo("/sign-in", true);
    }
}

@if(!ComponentState.Value.UxState.Is(UxState.Success))
{
    <SignTemplate Context="@_context" OnSubmit="@OnSubmit">
        <h1 class="title">Sign Up</h1>
        <span class="caption right-align">
            <a @onclick="NavigateRedirect">main page</a>
            or
            <a @onclick="NavigateToSignIn">sign in</a>
        </span>
        <hr>
        <InputWrapper
            Title="email *"
            For="@(() => _dto.Email)">
            <OneLineInput
                id="email"
                type="email"
                placeholder="Type email ..."
                disabled="@(!CanEdit)"
                @bind-Value="_dto.Email" />
        </InputWrapper>
        <InputWrapper
            Title="username *"
            For="@(() => _dto.Username)">
            <OneLineInput
                id="username"
                placeholder="Type username ..."
                disabled="@(!CanEdit)"
                @bind-Value="_dto.Username" />
        </InputWrapper>
        <InputWrapper
            Title="password *"
            For="@(() => _dto.Password)">
            <OneLineInput
                id="password"
                placeholder="Type password ..."
                disabled="@(!CanEdit)"
                @bind-Value="_dto.Password" />
        </InputWrapper>
        <hr>
        @if (ComponentState.Value.UxState.Is(UxState.Error))
        {
            <span class="caption error right-align">@ComponentState.Value.ServerError</span>
        }
        <Button
            disabled="@(!CanSubmit)"
            class="filled"
            type="submit">
            <div class="submit">
                @if((ComponentState.Value.UxState & UxState.Loading) != UxState.None)
                {
                    <CircleSpinner Color="var(--background)" Count="8" Size="24px" />
                }
                SIGN UP
            </div>
        </Button>
    </SignTemplate>
}
else
{
    <ResultStatus Icon="fa-solid fa-5x fa-check-circle" Title="Done!">
        Please go to your email and confirm your account <br>
        <a class="caption right-align" @onclick="NavigateRedirect">main page</a>
    </ResultStatus>
}
