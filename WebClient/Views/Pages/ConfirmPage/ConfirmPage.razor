@page "/confirm"
@layout WebClient.Views.Layouts.SignLayout.SignLayout
@using WebClient.Store.Pages.ConfirmPage
@using WebClient.Typing
@using WebClient.Extensions
@using WebClient.Views.Components
@using WebClient.Views.Components.CircleSpinner
@using WebClient.Views.Components.ResultStatus
@using WebClient.Store.Common
@using WebClient.Store.User
@using WebClient.Services
@inherits WebClient.Views.Components.PageComponent<ConfirmPageState>

<div>
    @if(ComponentState.Value.UxState.Is(UxState.Error))
    {
        <ResultStatus Icon="fa-solid fa-5x fa-circle-exclamation" Title="Ooops!">
            @ComponentState.Value.ServerError <br>
            <a class="caption right-align" @onclick="NavigateRedirect">main page</a>
        </ResultStatus>
    }
    else if(ComponentState.Value.UxState.Is(UxState.Success))
    {
        <ResultStatus Icon="fa-solid fa-5x fa-check-circle" Title="Confirmed!">
            Redirect you to main page...
        </ResultStatus>
    }
    else
    {
        <ResultStatus>
            <CircleSpinner Size="50px" />
            Confirming account...
        </ResultStatus>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Confirm { get; set; }

    [Inject]
    public AuthService AuthService { get; set; }

    protected override Components.PageAccessType PageAccess => Components.PageAccessType.OnlyPublic;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        try
        {
            if (Confirm == null)
            {
                throw new Exception("No confirm code specified");
            }
            else
            {
                Dispatcher.Dispatch(new SetUxState<ConfirmPageState>(UxState.Loading));
                var res = await AuthService.Confirm(new ConfirmDto(new Guid(Confirm)));
                if (!res.IsSuccessStatusCode)
                {
                    throw new Exception((await res.Content.ReadFromJsonAsync<ErrorDto>())?.Message);
                }
                var tokens = await res.Content.ReadFromJsonAsync<AccessRefreshTokensDto>();
                Dispatcher.Dispatch(new SetTokensAction(tokens!));
            }
        }
        catch (Exception e)
        {
            Dispatcher.Dispatch(new SetError<ConfirmPageState>(e.Message));
            Dispatcher.Dispatch(new SetUxState<ConfirmPageState>(UxState.Error));
        }
    }
}
